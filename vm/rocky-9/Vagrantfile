# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "bento/rockylinux-9"
  config.vm.box_version = "202502.21.0"


  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  #config.vm.provider "libvirt"
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = false

    # Customize the amount of memory on the VM:
    vb.customize ["modifyvm", :id, "--memory", "2048"]
    vb.customize ["modifyvm", :id, "--cpus", "4"]   
    vb.customize ["modifyvm", :id, "--ioapic", "on"]
    vb.memory = "2048"
    #vb.memory = "1024"

    #unless File.exist?('./secondDisk.vdi')
    #    vb.customize ['createhd', '--filename', './secondDisk.vdi', '--variant', 'Fixed', '--size', 1 * 1024]
    #end
    #vb.customize ['storagectl', :id, '--name', 'SATA', '--add', 'sata', '--controller', 'IntelAHCI', '--portcount', 1]
    #vb.customize ['storageattach', :id, '--storagectl', 'SATA', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', './secondDisk.vdi']

  end

  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL

    export DOCKER_USER=vagrant
    OTHER_USER=userb
    sudo groupadd  $DOCKER_USER 
    sudo adduser --home-dir /home/$DOCKER_USER -m -G sudo,$DOCKER_USER --system $DOCKER_USER  
    sudo groupadd  $OTHER_USER 
    sudo groupadd  usera
    sudo adduser --home-dir /home/$OTHER_USER -m -g userb -G $DOCKER_USER,usera --system $OTHER_USER   
    sudo usermod -G usera vagrant
    echo '%sudo ALL=(ALL) NOPASSWD:ALL' | sudo tee -a /etc/sudoers

    sudo dnf config-manager --enable crb
    sudo dnf install -y git cmake ninja-build libasan libubsan boost-devel ncurses-devel libcap-devel wget which gcc-c++ lld libcurl-devel openssl-devel libpsl-devel

    #sudo mkfs.xfs /dev/sdb
    #sudo mount /dev/sdb /mnt
    #sudo chown daemon:daemon /mnt
    #echo "/mnt localhost(rw,sync,no_subtree_check,root_squash)" | sudo tee /etc/exports
    #sudo systemctl start nfs-server

    sudo git clone https://github.com/bats-core/bats-core.git
    cd bats-core
    sudo ./install.sh /opt/bats
    sudo ln -s /opt/bats/bin/bats /usr/local/bin/bats
    sudo ./docker/install_libs.sh support 0.3.0
    sudo ./docker/install_libs.sh assert 2.1.0
    sudo ./docker/install_libs.sh file 0.4.0

    sudo chmod a+x /home/vagrant

    sudo -i -u vagrant bash <<EOF


    cd /home/vagrant
    git clone https://github.com/holgerBerger/hpc-workspace-v2
    echo .......................................
    echo ...debug build.........................
    echo .......................................
    cd hpc-workspace-v2/external; ./get_externals.sh; cd ..;  cmake --preset debug-ninja -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld"; cmake --build --preset debug -j 8; cp build/debug/bin/ws_restore build/debug/bin/ws_restore_notest

    echo .......................................
    echo ...unit tests..........................
    echo .......................................
    cd hpc-workspace-v2 
    ctest --preset debug .

    cd
    echo .......................................
    echo ...release build.......................
    echo .......................................
    cd hpc-workspace-v2/external; ./get_externals.sh; cd ..;  cmake --preset release-ninja -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld"; cmake --build --preset release -j 8; cp build/release/bin/ws_restore build/release/bin/ws_restore_notest
    echo .......................................

    # user tests
    sudo rm -rf /tmp/ws
    mkdir /tmp/ws

    cd hpc-workspace-v2 
    echo .......................................
    echo ...bats tests as user..................
    echo .......................................
    env PATH=/home/vagrant/hpc-workspace-v2/build/debug/bin:$PATH /usr/local/bin/bats bats/test

    # prepare tests with privileges

    sudo rm -rf /tmp/ws
    sudo mkdir /tmp/ws
    sudo chown daemon:daemon /tmp/ws

    cd hpc-workspace-v2 
    sudo chown root build/release/bin/ws_restore build/release/bin/ws_allocate build/release/bin/ws_release build/release/bin/ws_restore_notest
    sudo chmod u+s build/release/bin/ws_restore build/release/bin/ws_allocate build/release/bin/ws_release build/release/bin/ws_restore_notest

    # get a valid config
    sudo cp bats/ws.conf /etc
    # create structure 
    sudo build/release/bin/ws_prepare 

    export PRESET=release

    echo .......................................
    echo ...bats tests with setuid..............
    echo .......................................
    env PATH=/home/vagrant/hpc-workspace-v2/build/release/bin:$PATH /usr/local/bin/bats bats/test_setuid

    sudo chmod u-s build/release/bin/ws_restore build/release/bin/ws_allocate build/release/bin/ws_release build/release/bin/ws_restore_notest
    sudo setcap "CAP_DAC_OVERRIDE=p CAP_CHOWN=p CAP_FOWNER=p" build/release/bin/ws_allocate
    sudo setcap "CAP_DAC_OVERRIDE=p CAP_CHOWN=p CAP_FOWNER=p" build/release/bin/ws_release
    sudo setcap "CAP_DAC_OVERRIDE=p CAP_DAC_READ_SEARCH=p" build/release/bin/ws_restore
    sudo setcap "CAP_DAC_OVERRIDE=p CAP_DAC_READ_SEARCH=p" build/release/bin/ws_restore_notest

    echo .......................................
    echo ...bats tests with setcap..............
    echo .......................................
    env PATH=/home/vagrant/hpc-workspace-v2/build/release/bin:$PATH /usr/local/bin/bats bats/test_cap
   
EOF
    true
  SHELL
end
